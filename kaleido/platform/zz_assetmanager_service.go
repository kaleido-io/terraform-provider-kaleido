// Code generated by eido. DO NOT EDIT.
// Copyright Â© Kaleido, Inc. 2025

// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at

//     http://www.apache.org/licenses/LICENSE-2.0

// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package platform

// import (
// 	"context"
// 	"encoding/json"
// 	"fmt"
// 	"net/http"

// 	"github.com/hashicorp/terraform-plugin-framework/diag"
// 	"github.com/hashicorp/terraform-plugin-framework/path"
// 	"github.com/hashicorp/terraform-plugin-framework/resource"
// 	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
// 	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
// 	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
// 	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
// 	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
// 	"github.com/hashicorp/terraform-plugin-framework/types"
// )

// type AssetManagerServiceResourceModel struct {
// 	ID                             types.String `tfsdk:"id"`
// 	Environment                    types.String `tfsdk:"environment"`
// 	EnvironmentMemberID            types.String `tfsdk:"environment_member_id"`
// 	Runtime                        types.String `tfsdk:"runtime"`
// 	Name                           types.String `tfsdk:"name"`
// 	StackID                        types.String `tfsdk:"stack_id"`
// 	FireflyDefaultreadahead        types.Int64  `tfsdk:"default_read_ahead"`
// 	InvocationsBatchsize           types.Int64  `tfsdk:"batch_size"`
// 	InvocationsConcurrency         types.Int64  `tfsdk:"concurrency"`
// 	InvocationsRecordnonidempotent types.Bool   `tfsdk:"record_non_idempotent"`
// 	Keymanager                     types.String `tfsdk:"key_manager"`
// 	ForceDelete                    types.Bool   `tfsdk:"force_delete"`
// }

// func AssetManagerServiceResourceFactory() resource.Resource {
// 	return &assetmanagerserviceResource{}
// }

// type assetmanagerserviceResource struct {
// 	commonResource
// }

// func (r *assetmanagerserviceResource) Metadata(_ context.Context, _ resource.MetadataRequest, resp *resource.MetadataResponse) {
// 	resp.TypeName = "kaleido_platform_assetmanager"
// }

// func (r *assetmanagerserviceResource) Schema(_ context.Context, _ resource.SchemaRequest, resp *resource.SchemaResponse) {
// 	resp.Schema = schema.Schema{
// 		Description: "",
// 		Attributes: map[string]schema.Attribute{
// 			"id": &schema.StringAttribute{
// 				Computed:      true,
// 				PlanModifiers: []planmodifier.String{stringplanmodifier.UseStateForUnknown()},
// 			},
// 			"environment": &schema.StringAttribute{
// 				Required:      true,
// 				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
// 				Description:   "Environment ID where the AssetManager service will be deployed",
// 			},
// 			"environment_member_id": &schema.StringAttribute{
// 				Computed: true,
// 			},
// 			"runtime": &schema.StringAttribute{
// 				Required:      true,
// 				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
// 				Description:   "Runtime ID where the AssetManager service will be deployed",
// 			},
// 			"name": &schema.StringAttribute{
// 				Required:    true,
// 				Description: "Display name for the AssetManager service",
// 			},
// 			"stack_id": &schema.StringAttribute{
// 				Required:      true,
// 				PlanModifiers: []planmodifier.String{stringplanmodifier.RequiresReplace()},
// 				Description:   "Stack ID where the AssetManager service belongs",
// 			},
// 			"default_read_ahead": &schema.Int64Attribute{
// 				Optional:    true,
// 				Computed:    true,
// 				Default:     int64default.StaticInt64(50),
// 				Description: "Read-ahead configuration to apply to FireFly subscriptions without a custom setting",
// 			},
// 			"batch_size": &schema.Int64Attribute{
// 				Optional:    true,
// 				Computed:    true,
// 				Default:     int64default.StaticInt64(10),
// 				Description: "Maximum number of tasks an asynchronous worker will include in a batch",
// 			},
// 			"concurrency": &schema.Int64Attribute{
// 				Optional:    true,
// 				Computed:    true,
// 				Default:     int64default.StaticInt64(10),
// 				Description: "Number of workers available to process asynchronous invocations",
// 			},
// 			"record_non_idempotent": &schema.BoolAttribute{
// 				Optional:    true,
// 				Computed:    true,
// 				Default:     booldefault.StaticBool(true),
// 				Description: "Record invocations that are performed synchronously via API without an idempotencyKey",
// 			},
// 			"key_manager": &schema.StringAttribute{
// 				Optional:    true,
// 				Sensitive:   true,
// 				Description: "keyManagerService",
// 			},
// 			"force_delete": &schema.BoolAttribute{
// 				Optional:    true,
// 				Description: "Set to true when you plan to delete a protected AssetManager service. You must apply this value before running terraform destroy.",
// 			},
// 		},
// 	}
// }

// func (data *AssetManagerServiceResourceModel) toAssetManagerServiceAPI(ctx context.Context, api *ServiceAPIModel, diagnostics *diag.Diagnostics) {
// 	api.Type = "AssetManagerService"
// 	api.Name = data.Name.ValueString()
// 	api.StackID = data.StackID.ValueString()
// 	api.Runtime.ID = data.Runtime.ValueString()
// 	api.Config = make(map[string]interface{})

// 	// Handle firefly flattened fields
// 	fireflyConfig := make(map[string]interface{})
// 	if !data.FireflyDefaultreadahead.IsNull() {
// 		fireflyConfig["defaultReadAhead"] = data.FireflyDefaultreadahead.ValueInt64()
// 	}
// 	// Set the config if any fields were set
// 	if len(fireflyConfig) > 0 {
// 		api.Config["firefly"] = fireflyConfig
// 	}
// 	// Handle invocations flattened fields
// 	invocationsConfig := make(map[string]interface{})
// 	if !data.InvocationsBatchsize.IsNull() {
// 		invocationsConfig["batchSize"] = data.InvocationsBatchsize.ValueInt64()
// 	}
// 	if !data.InvocationsConcurrency.IsNull() {
// 		invocationsConfig["concurrency"] = data.InvocationsConcurrency.ValueInt64()
// 	}
// 	if !data.InvocationsRecordnonidempotent.IsNull() {
// 		invocationsConfig["recordNonIdempotent"] = data.InvocationsRecordnonidempotent.ValueBool()
// 	}
// 	// Set the config if any fields were set
// 	if len(invocationsConfig) > 0 {
// 		api.Config["invocations"] = invocationsConfig
// 	}
// 	api.Config["keyManager"] = map[string]interface{}{
// 		"id": data.Keymanager.ValueString(),
// 	}
// }

// func (api *ServiceAPIModel) toAssetManagerServiceData(data *AssetManagerServiceResourceModel, diagnostics *diag.Diagnostics) {
// 	data.ID = types.StringValue(api.ID)
// 	data.EnvironmentMemberID = types.StringValue(api.EnvironmentMemberID)
// 	data.Runtime = types.StringValue(api.Runtime.ID)
// 	data.Name = types.StringValue(api.Name)
// 	data.StackID = types.StringValue(api.StackID)

// 	// Extract firefly flattened fields
// 	if fireflyConfig, ok := api.Config["firefly"].(map[string]interface{}); ok {
// 		if v, ok := fireflyConfig["defaultReadAhead"].(float64); ok {
// 			data.FireflyDefaultreadahead = types.Int64Value(int64(v))
// 		} else {
// 			data.FireflyDefaultreadahead = types.Int64Value(50)
// 		}
// 	} else {
// 		data.FireflyDefaultreadahead = types.Int64Null()
// 	}
// 	// Extract invocations flattened fields
// 	if invocationsConfig, ok := api.Config["invocations"].(map[string]interface{}); ok {
// 		if v, ok := invocationsConfig["batchSize"].(float64); ok {
// 			data.InvocationsBatchsize = types.Int64Value(int64(v))
// 		} else {
// 			data.InvocationsBatchsize = types.Int64Value(10)
// 		}
// 		if v, ok := invocationsConfig["concurrency"].(float64); ok {
// 			data.InvocationsConcurrency = types.Int64Value(int64(v))
// 		} else {
// 			data.InvocationsConcurrency = types.Int64Value(10)
// 		}
// 		if v, ok := invocationsConfig["recordNonIdempotent"].(bool); ok {
// 			data.InvocationsRecordnonidempotent = types.BoolValue(v)
// 		} else {
// 			data.InvocationsRecordnonidempotent = types.BoolValue(true)
// 		}
// 	} else {
// 		data.InvocationsBatchsize = types.Int64Null()
// 		data.InvocationsConcurrency = types.Int64Null()
// 		data.InvocationsRecordnonidempotent = types.BoolNull()
// 	}
// 	if v, ok := api.Config["keyManager"].(map[string]interface{}); ok {
// 		if id, ok := v["id"].(string); ok {
// 			data.Keymanager = types.StringValue(id)
// 		}
// 	}
// }

// func (r *assetmanagerserviceResource) apiPath(data *AssetManagerServiceResourceModel) string {
// 	path := fmt.Sprintf("/api/v1/environments/%s/services", data.Environment.ValueString())
// 	if data.ID.ValueString() != "" {
// 		path = path + "/" + data.ID.ValueString()
// 	}
// 	if !data.ForceDelete.IsNull() && data.ForceDelete.ValueBool() {
// 		path = path + "?force=true"
// 	}
// 	return path
// }

// func (r *assetmanagerserviceResource) Create(ctx context.Context, req resource.CreateRequest, resp *resource.CreateResponse) {
// 	var data AssetManagerServiceResourceModel
// 	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)

// 	var api ServiceAPIModel
// 	data.toAssetManagerServiceAPI(ctx, &api, &resp.Diagnostics)
// 	if resp.Diagnostics.HasError() {
// 		return
// 	}

// 	ok, _ := r.apiRequest(ctx, http.MethodPost, r.apiPath(&data), api, &api, &resp.Diagnostics)
// 	if !ok {
// 		return
// 	}

// 	api.toAssetManagerServiceData(&data, &resp.Diagnostics)
// 	r.waitForReadyStatus(ctx, r.apiPath(&data), &resp.Diagnostics)

// 	api.ID = data.ID.ValueString()
// 	ok, _ = r.apiRequest(ctx, http.MethodGet, r.apiPath(&data), nil, &api, &resp.Diagnostics)
// 	if !ok {
// 		return
// 	}

// 	api.toAssetManagerServiceData(&data, &resp.Diagnostics)
// 	resp.Diagnostics.Append(resp.State.Set(ctx, data)...)
// }

// func (r *assetmanagerserviceResource) Update(ctx context.Context, req resource.UpdateRequest, resp *resource.UpdateResponse) {
// 	var data AssetManagerServiceResourceModel
// 	resp.Diagnostics.Append(req.Plan.Get(ctx, &data)...)
// 	resp.Diagnostics.Append(req.State.GetAttribute(ctx, path.Root("id"), &data.ID)...)

// 	var api ServiceAPIModel
// 	if ok, _ := r.apiRequest(ctx, http.MethodGet, r.apiPath(&data), nil, &api, &resp.Diagnostics); !ok {
// 		return
// 	}

// 	data.toAssetManagerServiceAPI(ctx, &api, &resp.Diagnostics)
// 	if resp.Diagnostics.HasError() {
// 		return
// 	}

// 	if ok, _ := r.apiRequest(ctx, http.MethodPut, r.apiPath(&data), api, &api, &resp.Diagnostics); !ok {
// 		return
// 	}

// 	api.toAssetManagerServiceData(&data, &resp.Diagnostics)
// 	r.waitForReadyStatus(ctx, r.apiPath(&data), &resp.Diagnostics)

// 	if ok, _ := r.apiRequest(ctx, http.MethodGet, r.apiPath(&data), nil, &api, &resp.Diagnostics); !ok {
// 		return
// 	}
// 	api.toAssetManagerServiceData(&data, &resp.Diagnostics)
// 	resp.Diagnostics.Append(resp.State.Set(ctx, data)...)
// }

// func (r *assetmanagerserviceResource) Read(ctx context.Context, req resource.ReadRequest, resp *resource.ReadResponse) {
// 	var data AssetManagerServiceResourceModel
// 	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

// 	var api ServiceAPIModel
// 	api.ID = data.ID.ValueString()
// 	ok, status := r.apiRequest(ctx, http.MethodGet, r.apiPath(&data), nil, &api, &resp.Diagnostics, Allow404())
// 	if !ok {
// 		return
// 	}
// 	if status == 404 {
// 		resp.State.RemoveResource(ctx)
// 		return
// 	}

// 	api.toAssetManagerServiceData(&data, &resp.Diagnostics)
// 	resp.Diagnostics.Append(resp.State.Set(ctx, data)...)
// }

// func (r *assetmanagerserviceResource) Delete(ctx context.Context, req resource.DeleteRequest, resp *resource.DeleteResponse) {
// 	var data AssetManagerServiceResourceModel
// 	resp.Diagnostics.Append(req.State.Get(ctx, &data)...)

// 	_, _ = r.apiRequest(ctx, http.MethodDelete, r.apiPath(&data), nil, nil, &resp.Diagnostics, Allow404())
// 	r.waitForRemoval(ctx, r.apiPath(&data), &resp.Diagnostics)
// }
